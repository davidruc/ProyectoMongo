/* CREACIÓN BASE DE DATOS */
use("db_campus_alquiler");
db.createCollection("sucursal", {
    capped: true,
    size: 1102,
    max: 6,
    validator:{
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [
                "ID_Sucursal", "Nombre", "Direccion", "Telefono"
            ],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Sucursal: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 20,
                },
                Nombre: {
                    "bsonType": "string",
                    "maxLength": 58,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                },
                Direccion: {
                    "bsonType": "string",
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                },
                Telefono: {
                    "bsonType": "number",
                    "minimum": 3000000000,
                    "maximum": 4000000000,
                }
            }
        }
    }
});
db.createCollection("automovil", {
    capped: true,
    size: 1600,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Automovil", "Marca", "Modelo", "Anio", "Tipo", "Capacidad", "Precio_Diario" ],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Automovil: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                }, Marca: {
                    "bsonType": "string",
                    "maxLength": 85,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }, Modelo:{
                    "bsonType": "string",
                    "maxLength": 25,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }, Anio:{
                    "bsonType": "int",
                    "minimum": 1885,
                    "maximum": 2024,
                }, Tipo: {
                    "bsonType": "string",
                    "maxLength": 30,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }, Capacidad: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 40,
                }, Precio_Diario: {
                    "bsonType": "int",
                    "minimum": 50000,
                    "maximum": 400000,
                }
            }
        }
    }
});
db.createCollection("sucursal_automovil", {
    capped: true,
    size: 1000,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Sucursal_id", "ID_Automovil_id", "Cantidad_Disponible"],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Sucursal_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Automovil_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Cantidad_Disponible: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 40,
                }

            }
        }
    }
});
db.createCollection("reserva", {
    capped: true,
    size: 20000,
    max: 100,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Reserva", "ID_Cliente_id", "ID_Automovil_id", "Fecha_Reserva", "Fecha_Inicio", "Fecha_Fin", "Estado"],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Reserva: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Cliente_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Automovil_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Fecha_Reserva: {
                    bsonType: "string",
                    pattern:  "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",  
                    description: "Debe informar el campo Fecha_Reserva y este debe ser un dato que siga el patron",
                },
                Fecha_Inicio: {
                    bsonType: "string",
                    pattern:  "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",  
                    description: "Debe informar el campo Fecha_Reserva y este debe ser un dato que siga el patron",
                },
                Fecha_Fin: {
                    bsonType: "string",
                    pattern:  "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",  
                    description: "Debe informar el campo Fecha_Reserva y este debe ser un dato que siga el patron",
                },
                Estado: {
                    bsonType: "string",
                    "maxLength": 30,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }
            }
        }
    }
});
db.createCollection("cliente", {
    capped: true,
    size: 16000,
    max: 100,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Cliente", "Nombre", "Apellido", "DNI", "Direccion", "Telefono"],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Cliente: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Nombre: {
                    bsonType: "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                },
                Apellido: {
                    bsonType: "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                },
                DNI: {
                    "bsonType": "number",
            
                },
                Direccion: {
                    "bsonType": "string",
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                },
                Telefono: {
                    "bsonType": "number",
                 
                },
                Email: {
                    "bsonType": "string",
                    "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                }
            }
        }
    }
});
db.createCollection("alquiler", {
    capped: true,
    size: 16000,
    max: 100,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Alquiler", "ID_Cliente_id", "ID_Automovil_id", "Fecha_Inicio", "Fecha_Fin", "Costo_Total", "Estado"],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Alquiler: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Cliente_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Automovil_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Fecha_Inicio: {
                    bsonType: "string",
                    pattern:  "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",  
                    description: "Debe informar el campo Fecha_Reserva y este debe ser un dato que siga el patron",
                },
                Fecha_Fin: {
                    bsonType: "string",
                    pattern:  "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",  
                    description: "Debe informar el campo Fecha_Reserva y este debe ser un dato que siga el patron",
                },
                Costo_Total: {
                    "bsonType": "number",
                    "minimum": 50000,
                    "maximum": 41000000,
                },
                Estado: {
                    bsonType: "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                }
            }
        }
    }
});
db.createCollection("registro_devolucion", {
    capped: true,
    size: 8000,
    max: 50,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Registro", "ID_Alquiler_id", "ID_Empleado_id", "Fecha_Devolucion", "Combustible_Devuelto", "Kilometraje_Devuelto"],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Registro: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Alquiler_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Empleado_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Fecha_Devolucion: {
                    bsonType: "string",
                    pattern:  "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",  
                    description: "Debe informar el campo Fecha_Reserva y este debe ser un dato que siga el patron",
                },
                Combustible_Devuelto: {
                    "bsonType": "double",
                    "minimum": 1,
                    "maximum": 20,
                },
                Monto_Adicional: {
                    "bsonType": "number",
                    "minimum": 1000,
                    "maximum": 41000000,
                },
                Kilometraje_Devuelto: {
                    "bsonType": "number",
                    "minimum": 1,
                    "maximum": 100000,
                }
            }
        }
    }
});
db.createCollection("registro_entrega", {
    capped: true,
    size: 8000,
    max: 50,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["ID_Registro", "ID_Alquiler_id" ,"ID_Empleado_id" ,"Fecha_Entrega" ,"Combustible_Entregado","Kilometraje_Entregado"],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Registro: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Alquiler_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Empleado_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Fecha_Entrega: {
                    bsonType: "string",
                    pattern:  "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",  
                    description: "Debe informar el campo Fecha_Reserva y este debe ser un dato que siga el patron",
                },
                Combustible_Entregado: {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 20,
                },
                Kilometraje_Entregado: {
                    "bsonType": "number",
                    "minimum": 1,
                    "maximum": 100000,
                }
            }
        }
    }
});
db.createCollection("empleado", {
    capped: true,
    size: 16000,
    max: 100,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Empleado", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Cargo"],
            properties: {
                _id: {
                    "bsonType": "objectId"
                },
                ID_Empleado: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Nombre: {
                    bsonType: "string", 
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                },
                Apellido: {
                    bsonType: "string", 
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                },
                DNI: {
                    "bsonType": "number",
                    "minimum": 10000000,
                    "maximum": 10000000000,
                },
                Direccion: {
                    "bsonType": "string",
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                },
                Telefono: {
                    "bsonType": "number",
                    "minimum": 3000000000,
                    "maximum": 4000000000,
                },
                Cargo: {
                    "bsonType": "string",
                    "maxLength": 80,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }
            }
        }
    }
});


