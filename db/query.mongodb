/* CREACIÓN BASE DE DATOS */
use("db_campus_alquiler");
db.createCollection("sucursal", {
    capped: true,
    size: 1102,
    max: 6,
    validator:{
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [
                "ID_Sucursal", "Nombre", "Direccion", "Telefono"
            ],
            properties: {
                ID_Sucursal: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 20,
                },
                Nombre: {
                    "bsonType": "string",
                    "maxLength": 58,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                },
                Direccion: {
                    "bsonType": "string",
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                },
                Telefono: {
                    "bsonType": "number",
                    "minimum": 3000000000,
                    "maximum": 4000000000,
                }
            }
        }
    }
});
db.createCollection("automovil", {
    capped: true,
    size: 1600,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Automovil", "Marca", "Modelo", "Anio", "Tipo", "Capacidad", "Precio_Diario" ],
            properties: {
                ID_Automovil: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                }, Marca: {
                    "bsonType": "string",
                    "maxLength": 85,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }, Modelo:{
                    "bsonType": "string",
                    "maxLength": 25,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }, Anio:{
                    "bsonType": "int",
                    "minimum": 1885,
                    "maximum": 2024,
                }, Tipo: {
                    "bsonType": "string",
                    "maxLength": 30,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }, Capacidad: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 40,
                }, Precio_Diario: {
                    "bsonType": "int",
                    "minimum": 50000,
                    "maximum": 400000,
                }
            }
        }
    }
});
db.createCollection("sucursal_automovil", {
    capped: true,
    size: 1000,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Sucursal_id", "ID_Automovil_id", "Cantidad_Disponible"],
            properties: {
                ID_Sucursal_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Automovil_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Cantidad_Disponible: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 40,
                }

            }
        }
    }
});
db.createCollection("reserva", {
    capped: true,
    size: 20000,
    max: 100,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Reserva", "ID_Cliente_id", "ID_Automovil_id", "Fecha_Reserva", "Fecha_Inicio", "Fecha_Fin", "Estado"],
            properties: {
                ID_Reserva: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Cliente_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Automovil_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Fecha_Reserva: {
                    bsonType: "date",
                    description: "Debe informar el campo Fecha_Reserva y este debe ser un dato date",
                },
                Fecha_Inicio: {
                    bsonType: "date",
                    description: "Debe informar el campo Fecha_Inicio y este debe ser un dato date",
                },
                Fecha_Fin: {
                    bsonType: "date",
                    description: "Debe informar el campo Fecha_Fin y este debe ser un dato date",
                },
                Estado: {
                    bsonType: "string",
                    "maxLength": 30,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }
            }
        }
    }
});
db.createCollection("cliente", {
    capped: true,
    size: 16000,
    max: 100,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Cliente", "Nombre", "Apellido", "DNI", "Direccion", "Telefono"],
            properties: {
                ID_Cliente: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Nombre: {
                    bsonType: "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                },
                Apellido: {
                    bsonType: "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                },
                DNI: {
                    "bsonType": "number",
            
                },
                Direccion: {
                    "bsonType": "string",
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                },
                Telefono: {
                    "bsonType": "number",
                 
                },
                Email: {
                    "bsonType": "string",
                    "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                }
            }
        }
    }
});
db.createCollection("alquiler", {
    capped: true,
    size: 16000,
    max: 100,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Alquiler", "ID_Cliente_id", "ID_Automovil_id", "Fecha_Inicio", "Fecha_Fin", "Costo_Total", "Estado"],
            properties: {
                ID_Alquiler: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Cliente_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Automovil_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Fecha_Inicio: {
                    bsonType: "date",
                    description: "Debe informar el campo Fecha_Fin y este debe ser un dato date",
                },
                Fecha_Fin: {
                    bsonType: "date",
                    description: "Debe informar el campo Fecha_Fin y este debe ser un dato date",
                },
                Costo_Total: {
                    "bsonType": "number",
                    "minimum": 50000,
                    "maximum": 41000000,
                },
                Estado: {
                    bsonType: "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                }
            }
        }
    }
});
db.createCollection("registro_devolucion", {
    capped: true,
    size: 8000,
    max: 50,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Registro", "ID_Alquiler_id", "ID_Empleado_id", "Fecha_Devolucion", "Combustible_Devuelto", "Kilometraje_Devuelto"],
            properties: {
                ID_Registro: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Alquiler_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Empleado_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Fecha_Devolucion: {
                    bsonType: "date",
                    description: "Debe informar el campo Fecha_Fin y este debe ser un dato date",
                },
                Combustible_Devuelto: {
                    "bsonType": "double",
                    "minimum": 1,
                    "maximum": 20,
                },
                Monto_Adicional: {
                    "bsonType": "number",
                    "minimum": 1000,
                    "maximum": 41000000,
                },
                Kilometraje_Devuelto: {
                    "bsonType": "number",
                    "minimum": 1,
                    "maximum": 100000,
                }
            }
        }
    }
});
db.createCollection("registro_entrega", {
    capped: true,
    size: 8000,
    max: 50,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["ID_Registro", "ID_Alquiler_id" ,"ID_Empleado_id" ,"Fecha_Entrega" ,"Combustible_Entregado","Kilometraje_Entregado"],
            properties: {
                ID_Registro: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Alquiler_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                ID_Empleado_id: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Fecha_Entrega: {
                    bsonType: "date",
                    description: "Debe informar el campo Fecha_Fin y este debe ser un dato date",
                },
                Combustible_Entregado: {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 20,
                },
                Kilometraje_Entregado: {
                    "bsonType": "number",
                    "minimum": 1,
                    "maximum": 100000,
                }
            }
        }
    }
});
db.createCollection("empleado", {
    capped: true,
    size: 16000,
    max: 100,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: [ "ID_Empleado", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Cargo"],
            properties: {
                ID_Empleado: {
                    "bsonType": "int",
                    "minimum": 0,
                    "maximum": 100,
                },
                Nombre: {
                    bsonType: "string", 
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                },
                Apellido: {
                    bsonType: "string", 
                    "maxLength": 255,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ\\s-]+$"
                },
                DNI: {
                    "bsonType": "number",
                    "minimum": 10000000,
                    "maximum": 10000000000,
                },
                Direccion: {
                    "bsonType": "string",
                    "pattern": "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                },
                Telefono: {
                    "bsonType": "number",
                    "minimum": 3000000000,
                    "maximum": 4000000000,
                },
                Cargo: {
                    "bsonType": "string",
                    "maxLength": 80,
                    "minLength": 1,
                    "pattern": "^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\\s-]+$",
                }
            }
        }
    }
});


/* insertar datos de prueba */
use("db_campus_alquiler");
db.sucursal.insertOne(
    {
        ID_Sucursal: 3,
        Nombre: "medallo papa",
        Direccion: "calle 15# 21",
        Telefono: 3185767865,
    }
);
db.automovil.insertMany([
    {
        ID_Automovil: 1,
        Marca: "Chevrolet",
        Modelo: "captiva",
        Anio: 2021,
        Tipo:"Automovil",
        Capacidad: 4,
        Precio_Diario:140000
    },
    {
        ID_Automovil: 3,
        Marca: "Kia",
        Modelo: "picanto",
        Anio: 2021,
        Tipo:"Automovil",
        Capacidad: 4,
        Precio_Diario:90000
    },
    {
        ID_Automovil: 4,
        Marca: "Ford",
        Modelo: "Fiesta",
        Anio: 2014,
        Tipo:"Automovil",
        Capacidad: 6,
        Precio_Diario:160000
    },
    {
        ID_Automovil: 5,
        Marca: "Chevrolet",
        Modelo: "camaro",
        Anio: 2017,
        Tipo:"Automovil",
        Capacidad: 4,
        Precio_Diario:130000
    }
]);
db.sucursal_automovil.insertMany([
    {
        ID_Sucursal_id: 2,
        ID_Automovil_id: 2,
        Cantidad_Disponible:9
    },
    {
        ID_Sucursal_id: 3,
        ID_Automovil_id: 3,
        Cantidad_Disponible:15
    },
    {
        ID_Sucursal_id: 3,
        ID_Automovil_id: 4,
        Cantidad_Disponible:20
    },
    {
        ID_Sucursal_id: 2,
        ID_Automovil_id: 5,
        Cantidad_Disponible:4
    }
]);
db.reserva.insertMany([
    {
        ID_Reserva: 2,
        ID_Cliente_id: 2,
        ID_Automovil_id: 2,
        Fecha_Reserva:new Date (2023,7,15),
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,1,20),
        Estado: "Confirmado"
    },
    {
        ID_Reserva: 3,
        ID_Cliente_id: 3,
        ID_Automovil_id: 3,
        Fecha_Reserva:new Date (2023,7,15),
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,1,20),
        Estado: "Confirmado"
    },
    {
        ID_Reserva: 4,
        ID_Cliente_id: 4,
        ID_Automovil_id: 4,
        Fecha_Reserva:new Date (2023,7,15),
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,1,20),
        Estado: "Apartado"
    },
    {
        ID_Reserva: 5,
        ID_Cliente_id: 5,
        ID_Automovil_id: 5,
        Fecha_Reserva:new Date (2023,7,15),
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,1,20),
        Estado: "Confirmado"
    },
    {
        ID_Reserva: 6,
        ID_Cliente_id: 4,
        ID_Automovil_id: 2,
        Fecha_Reserva:new Date (2023,7,15),
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,1,20),
        Estado: "Apartado"
    }
]);
db.cliente.insertMany([
    {
        ID_Cliente: 2,
        Nombre: "cliente2",
        Apellido:"apellido",
        DNI:125356895,
        Direccion:"Calle 11",
        Telefono:3000000002,
        Email:"correo@gmail.com"
    },
    {
        ID_Cliente: 3,
        Nombre: "cliente3",
        Apellido:"apellido",
        DNI:125356895,
        Direccion:"Calle 11",
        Telefono:3000000002,
        Email:"correo@gmail.com"
    },
    {
        ID_Cliente: 4,
        Nombre: "cliente4",
        Apellido:"apellido",
        DNI:125356895,
        Direccion:"Calle 11",
        Telefono:3000000002,
        Email:"correo@gmail.com"
    },
    {
        ID_Cliente: 5,
        Nombre: "cliente5",
        Apellido:"apellido",
        DNI:125356895,
        Direccion:"Calle 11",
        Telefono:3000000002,
        Email:"correo@gmail.com"
    },
    {
        ID_Cliente: 6,
        Nombre: "cliente6",
        Apellido:"apellido",
        DNI:125356895,
        Direccion:"Calle 11",
        Telefono:3000000002,
        Email:"correo@gmail.com"
    }
]);
db.alquiler.insertMany([
    {
        ID_Alquiler: 2,
        ID_Cliente_id: 2,
        ID_Automovil_id: 2,
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,3,15),
        Costo_Total: 5100000,
        Estado: "activo"
    },
    {
        ID_Alquiler: 3,
        ID_Cliente_id: 3,
        ID_Automovil_id: 3,
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,3,15),
        Costo_Total: 2100000,
        Estado: "activo"
    },
    {
        ID_Alquiler: 4,
        ID_Cliente_id: 4,
        ID_Automovil_id: 4,
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,3,15),
        Costo_Total: 900000,
        Estado: "activo"
    },
    {
        ID_Alquiler: 5,
        ID_Cliente_id: 5,
        ID_Automovil_id: 5,
        Fecha_Inicio: new Date (2024,1,15),
        Fecha_Fin: new Date (2024,3,15),
        Costo_Total: 1200000,
        Estado: "Finalizado"
    },
]);
db.registro_devolucion.insertMany([
  
    {
        ID_Registro: 2,
        ID_Alquiler_id: 2,
        ID_Empleado_id: 2,
        Fecha_Devolucion: new Date (2024,3,15),
        Combustible_Devuelto: 1.2,
        Kilometraje_Devuelto: 30000,
        Monto_Adicional: 10000,
    },
    {
        ID_Registro: 3,
        ID_Alquiler_id: 3,
        ID_Empleado_id: 3,
        Fecha_Devolucion:new Date (2024,3,15),
        Combustible_Devuelto: 2.2,
        Kilometraje_Devuelto: 20000
    },
    {
        ID_Registro: 4,
        ID_Alquiler_id: 4,
        ID_Empleado_id: 4,
        Fecha_Devolucion: new Date (2024,3,15),
        Combustible_Devuelto: 6.2,
        Kilometraje_Devuelto: 21232
    },
    {
        ID_Registro: 5,
        ID_Alquiler_id: 5,
        ID_Empleado_id: 5,
        Fecha_Devolucion: new Date (2024,3,15),
        Combustible_Devuelto: 8.2,
        Kilometraje_Devuelto: 40000
    }
]);
db.resgistro_entrega.insertMany([
    {
        ID_Registro: 1,
        ID_Alquiler_id: 1,
        ID_Empleado_id: 1,
        Fecha_Entrega: new Date (2024,3,15),
        Combustible_Entregado: 5,
        Kilometraje_Entregado: 19000,
    },
    {
        ID_Registro: 2,
        ID_Alquiler_id: 2,
        ID_Empleado_id: 2,
        Fecha_Entrega: new Date (2024,3,15),
        Combustible_Entregado: 5,
        Kilometraje_Entregado: 29532,
    },
    {
        ID_Registro: 3,
        ID_Alquiler_id: 3,
        ID_Empleado_id: 3,
        Fecha_Entrega: new Date (2024,3,15),
        Combustible_Entregado: 5,
        Kilometraje_Entregado: 19454,
    },
    {
        ID_Registro: 4,
        ID_Alquiler_id: 4,
        ID_Empleado_id: 4,
        Fecha_Entrega: new Date (2024,3,15),
        Combustible_Entregado: 5,
        Kilometraje_Entregado: 20000,
    },
    {
        ID_Registro: 5,
        ID_Alquiler_id: 5,
        ID_Empleado_id: 5,
        Fecha_Entrega: new Date (2024,3,15),
        Combustible_Entregado: 5,
        Kilometraje_Entregado: 39643,
    }
]);
db.empleado.insertMany([
    {
        ID_Empleado: 1,
        Nombre: "Empleado1",
        Apellido: "o",
        DNI: 645782155,
        Direccion: "Calle 11",
        Telefono: 3226589547,
        Cargo: "Agente de Entrega"
    },
    {
        ID_Empleado: 2,
        Nombre: "Empleado2",
        Apellido: "o",
        DNI: 645782155,
        Direccion: "Calle 11",
        Telefono: 3226589547,
        Cargo: "Agente de Mantenimiento"
    },
    {
        ID_Empleado: 3,
        Nombre: "Empleado3",
        Apellido: "o",
        DNI: 645782155,
        Direccion: "Calle 12",
        Telefono: 3226589547,
        Cargo: "Agente de Entrega"
    },
    {
        ID_Empleado: 4,
        Nombre: "Empleado4",
        Apellido: "o",
        DNI: 645782155,
        Direccion: "Calle 11",
        Telefono: 3226589547,
        Cargo: "Agente de Mantenimiento"
    },
    {
        ID_Empleado: 5,
        Nombre: "Empleado5",
        Apellido: "o",
        DNI: 645782155,
        Direccion: "Calle 11",
        Telefono: 3226589547,
        Cargo: "Agente de Mantenimiento"
    },
    {
        ID_Empleado: 6,
        Nombre: "Empleado6",
        Apellido: "o",
        DNI: 645782155,
        Direccion: "Calle 11",
        Telefono: 3226589547,
        Cargo: "Gerente"
    },
    {
        ID_Empleado: 7,
        Nombre: "Empleado7",
        Apellido: "o",
        DNI: 645782155,
        Direccion: "Calle 11",
        Telefono: 3226589547,
        Cargo: "Asistente"
    }
]);

/* CONSULTAS A REALIZAR */
/* 1. No aplica */

/* 2. Mostrar todos los clientes registrados en la base de datos. */
use("db_campus_alquiler");
db.cliente.find();

/* 3. Obtener todos los automóviles disponibles para alquiler */
use("db_campus_alquiler");
db.automovil.find();

/* 4. Listar todos los alquileres activos junto con los datos de los
clientes relacionados. */
use("db_campus_alquiler");
db.getCollection("cliente").aggregate([
    {
        $lookup: {
          from: "alquiler",
          localField: "ID_Cliente",
          foreignField: "ID_Cliente_id",
          pipeline: [
            {
                $project: {
                  "_id": 0,
                  "id_alquiler": "$ID_Alquiler",
                  "estado_alquiler": "$Estado",
                  "inicio_alquiler": "$Fecha_Inicio",
                  "fin_alquiler": "$Fecha_Fin",
                  "costo_alquiler": "$Costo_Total",
                }
            }
          ],
          as: "info_alquiler"
        }
    },
    
    {
        $match: {
            "info_alquiler.estado_alquiler": {$eq : "activo"}
        }
    },
    {$unwind: "$info_alquiler"},
    {
        $project: {
            "_id": 0,
            "id": "$ID_Cliente",
            "nombre_cliente": "$Nombre",
            "apellido_cliente": "$Apellido",
            "documento": "$DNI",
            "ubicacion_cliente": "$Direccion",
            "numero_contacto": "$Telefono",
            "info_alquiler": "$info_alquiler"
        }
    },
]);

/* 5 Mostrar todas las reservas pendientes con los datos del cliente y el automóvil reservado */
use("db_campus_alquiler");
db.getCollection("cliente").aggregate([
    {
        $lookup: {
            from: "reserva",
            localField: "ID_Cliente",
            foreignField: "ID_Cliente_id",
            pipeline: [
                {
                    $lookup: {
                        from: "automovil",
                        localField: "ID_Automovil_id",
                        foreignField: "ID_Automovil",
                        pipeline: [
                            {
                                $project: {
                                  "_id": 0,
                                  "id_auto": "$ID_Automovil",
                                  "marca_automovil": "$Marca",
                                  "modelo_automovil": "$Modelo",
                                  "año_automovil": "$Anio"
                                }
                            }
                        ],
                        as: "info_automovil"
                    }  
                }, 
                {$unwind: "$info_automovil"},
                {
                    $project: {
                        "_id": 0,
                        "id_reservacion": "$ID_Reserva",
                        "estado_reserva": "$Estado",
                        "fecha_reservacion": "$Fecha_Reserva",
                        "fecha_inicio_prestamo": "$Fecha_Inicio",
                        "fecha_fin_prestamo": "$Fecha_Fin",
                        "info_automovil": "$info_automovil"
                    }
                }
            ],
            as: "info_reserva",
        }
    },
    {
        $match: {
          "info_reserva.estado_reserva": {$eq: "Apartado"}
        }
    },
    {$unwind: "$info_reserva"},
    {
        $project: {
          "_id": 0,
          "id_usuario": "$ID_Cliente",
          "nombre_cliente": "$Nombre",
          "apellido_cliente": "$Apellido",
          "documento": "$DNI",
          "ubicacion_cliente": "$Direccion",
          "numero_contacto": "$Telefono",
          "correo_electronico": "$Email",
          "info_reserva": "$info_reserva",
        }
    }
]);

/* 6 Obtener los detalles del alquiler con el ID_Alquilerespecífico. */

use("db_campus_alquiler");
db.getCollection("alquiler").aggregate([
    {
        $match: {
          "ID_Alquiler": 3
        }
    }
])

/* 7 Listar los empleados con el cargo de "Vendedor". */

use("db_campus_alquiler");
db.getCollection("empleado").aggregate([
    {
        $match: {
          "Cargo": "Agente de Entrega"
        }
    },
    {
        $project: {
            "_id": 0,
            "Apellido": 0
        }
    }
]);

/* 8 Mostrar la cantidad total de automóviles disponibles en cada sucursal. */

use("db_campus_alquiler");
db.getCollection("sucursal_automovil").aggregate([
    {
        $lookup: {
          from: "sucursal",
          localField: "ID_Sucursal_id",
          foreignField: "ID_Sucursal",
          as: "Total"
        }
    },
    
    {$unwind: "$Total" },
    {
        $group: {
          _id: "$Total.ID_Sucursal",
          sucursal: {$first: "$Total.Nombre"},
          totalAutos: {
            $sum: "$Cantidad_Disponible"
          }
        }
    }
]);

/* 9 Obtener el costo total de un alquiler específico. */

use("db_campus_alquiler");
db.getCollection("alquiler").aggregate([
    {
        $project: {
          _id: 0,
          ID_Automovil_id: 0,
          Fecha_Inicio:0,
          Fecha_Fin: 0,
          Estado: 0
        }
    },
    {
        $match: {
            "ID_Alquiler": {$eq: 2}
        }
    }
]);

/* 10. Listar los clientes con el DNI específico. */

use("db_campus_alquiler");
db.getCollection("cliente").aggregate([
    {
        $project: {
          "_id": 0,
          "id_usuario": "$ID_Cliente",
          "nombre_cliente": "$Nombre",
          "apellido_cliente": "$Apellido",
          "documento": "$DNI",
          "ubicacion_cliente": "$Direccion",
          "numero_contacto": "$Telefono",
          "correo_electronico": "$Email",
        }
    },{
        $match:{"documento": {$eq: "125356895"}}
    }
])

/* 11. Mostrar todos los automóviles con una capacidad mayor a 5 personas. */

use("db_campus_alquiler");
db.getCollection("automovil").aggregate({
    $match: {
        "Capacidad": {$gt :5}
    }
});

/* 12. Obtener los detalles del alquiler que tiene fecha de inicio en
'2023-07-05' */

use("db_campus_alquiler");
db.getCollection("alquiler").aggregate(
    {
        $match: {
            "Fecha_Inicio": {$eq:"2023-07-05"}
        }
    }
);

/* 13. Listar las reservas pendientes realizadas por un cliente específico. */

use("db_campus_alquiler");
db.getCollection("cliente").aggregate([
    {
        $lookup: {
          from: "reserva",
          localField: "ID_Cliente",
          foreignField: "ID_Cliente_id",
          pipeline: [
            {
                $match: {
                    "Estado": {$eq: "Apartado"}
                  }               
            },
            {
                $project: {
                    "_id": 0,
                    "id_reservacion": "$ID_Reserva",
                    "estado_reserva": "$Estado",
                    "fecha_reservacion": "$Fecha_Reserva",
                    "fecha_inicio_prestamo": "$Fecha_Inicio",
                    "fecha_fin_prestamo": "$Fecha_Fin",
                }
            }
          ],
          as: "informacion_reservas"
        }
    },
    {
        $project: {
            "_id": 0, 
            "id_usuario": "$ID_Cliente",
            "nombre_cliente": "$Nombre",
            "apellido_cliente": "$Apellido",
            "documento": "$DNI",
            "ubicacion_cliente": "$Direccion",
            "numero_contacto": "$Telefono",
            "correo_electronico": "$Email",
            "informacion_reservas": "$informacion_reservas"
        }
    },
    {
        $match: {
          "id_usuario": {$eq: 4}
        }
    }
]);

/* 14. Mostrar los empleados con cargo de "Gerente" o "Asistente". */

use("db_campus_alquiler");
db.empleado.find(
    {
        $or: [{Cargo: "Gerente"}, {Cargo: "Asistente"}]
    }
);

/* 15. Obtener los datos de los clientes que realizaron al menos un alquiler.  */

use("db_campus_alquiler");
db.getCollection("cliente").aggregate([
   
    {
        $lookup: {
          from: "alquiler",
          localField: "ID_Cliente",
          foreignField: "ID_Cliente_id",
          pipeline: [
            {
                $lookup: {
                    from: "registro_devolucion",
                    localField: "ID_Alquiler",
                    foreignField: "ID_Alquiler_id",
                    pipeline: [
                        {
                            $project: {
                              "_id": 0,
                              "id_registro_devolucion": "$ID_Registro",
                              "fecha_entrega": "$Fecha_Devolucion",
                              "combustible_retornado": "$Combustible_Devuelto",
                              "kilometraje_final": "$Kilometraje_Devuelto",
                            }
                        },
                    ],
                    as: "info_devolucion"
                  }
            },
            {
                $match: {
                  "info_devolucion": {
                    $ne: []
                  }
                }
            },{$unwind : "$info_devolucion"},
            {
                $project: {
                    "_id": 0,
                    "id_alquiler": "$ID_Alquiler",
                    "estado_alquiler": "$Estado",
                    "inicio_alquiler": "$Fecha_Inicio",
                    "fin_alquiler": "$Fecha_Fin",
                    "costo_alquiler": "$Costo_Total",
                    "info_devolucion": "$info_devolucion"
                }
            }
          ],
          as: "alquileres" 
        }
    },
    {
        $match: {
          "alquileres": {
            $ne: []
          }
        }
    }, 
    {
        $project: {
           
            "alquileres": "$alquileres"
        }
    }
]);

/* 16. Listar todos los automóviles ordenados por marca y modelo. */

use("db_campus_alquiler");
db.getCollection("automovil").aggregate([
    { $match: { Tipo: "Automovil" } },

    {
        $project: {
          "_id": 0
        }
    },  
    {
        $group: {
          _id: "$Marca",
          automoviles: {
            $push: "$$ROOT"
          }
        }
    },
    {
        $project: {
          "Marca": 0,
        }
    },
    { $sort: { _id: 1} },
  ]);
  
/* 17. Mostrar la cantidad total de automóviles en cada sucursal junto con su dirección. */

use("db_campus_alquiler");
db.getCollection("sucursal").aggregate([
    {
        $lookup: {
          from: "sucursal_automovil",
          localField: "_id",
          foreignField: "ID_Sucursal_id",
          as: "autos"
        }
    },
    {$unwind : "$autos"},
    {
        $group: {
          _id: "$Nombre",
          direccion: {$first: "$Direccion"},
          CantidadAutos: {
            $sum: "$autos.Cantidad_Disponible"
          }
        }
    }
])

/* 18.Obtener la cantidad total de alquileres registrados en la base de datos.  */

use("db_campus_alquiler");
db.alquiler.aggregate([
    {$count: 'ID_Alquiler'},
    {
        $project: {
            'Total de Alquileres' : '$ID_Alquiler'
        }
    }
]);

/* 19.Mostrar los automóviles con capacidad igual a 5 personas y que estén disponibles. */

use("db_campus_alquiler");
db.getCollection("automovil").aggregate([
    {
        $match: {
            "Capacidad": {$gt :5}
        }
    },
   
    {
        $lookup: {
          from: "sucursal_automovil",
          localField: "ID_Automovil",
          foreignField: "ID_Automovil_id",
          as: "cantidad"
        }
    }, {
        $unwind: "$disponibilidad"
    },
    {
        $project: {
          "cantidad._id": 0,
          "cantidad.ID_Sucursal_id": 0,
          "cantidad.ID_Automovil_id": 0 
        }
    }
]);

/* 20.Obtener los datos del cliente que realizó la reserva con reserva_id especifico*/



/* Arreglar para que venga desde cliente y no reservas */
use("db_campus_alquiler");
db.reserva.aggregate([{
        $match: {
            ID_Reserva: 2
        }
    },
    {
        $lookup: {
            from: "cliente",
            localField: "ID_Cliente_id",
            foreignField: "_id",
            as: "cliente_FK"
        }
    },
    {
        $project: {
            "ID_Automovil_id": 0,
            "Fecha_Reserva":0,
            "Fecha_Inicio":0,
            "Fecha_Fin":0
        }
    },
    {
        $group: {
            _id: "$_id",
            ID_Reserva: {
                $first: "$ID_Reserva"
            },
            ID_Cliente_id: {
                $first: "$ID_Cliente_id"
            },
            Estado: {
                $first: "$Estado"
            },
            cliente_FK: {
                $push: "$cliente_FK"
            },
        }
    },
    {
        $project: {
            "_id":0,
            "ID_Cliente_id":0,
            "cliente_FK._id": 0,
            "Fecha_Reserva":0
        }
    }
]);

/* 21.Listar los alquileres con fecha de inicio entre '2023-07-05' y '2023-07-10'. */
use("db_campus_alquiler");
db.alquiler.find({
    Fecha_Inicio: {
        $gte: "2023-08-11",
        $lte: "2023-09-11"
    }
});